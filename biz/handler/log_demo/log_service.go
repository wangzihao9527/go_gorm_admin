// Code generated by hertz generator.

package log_gorm

import (
	"context"
	"github.com/cloudwego/hertz-examples/bizdemo/hertz_gorm/biz/hertz_gen/user_gorm"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"log_demo/biz/dal/mysql"
	log_gorm "log_demo/biz/hertz_gen/log_gorm"
	"log_demo/biz/model"
	"log_demo/biz/pack"
	"time"
)

// UpdateLog .
// @router /v1/Log/update/:Log_id [POST]
func UpdateLog(ctx context.Context, c *app.RequestContext) {
	var err error
	var req log_gorm.UpdateLogRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	u := &model.Log{}
	u.ID = int64(req.ID)
	u.ActionType = string(req.ActionType)
	u.Level = string(req.Level)
	u.HandleTime = int64(req.HandleTime)
	u.Result = int64(req.Result)
	if err = mysql.UpdateLog(u); err != nil {
		c.JSON(200, &log_gorm.UpdateLogResponse{Code: log_gorm.Code_DBErr, Msg: err.Error()})
		return
	}

	c.JSON(consts.StatusOK, &log_gorm.UpdateLogResponse{Code: log_gorm.Code_Success})
}

// DeleteLog .
// @router /v1/Log/delete/:Log_id [POST]
func DeleteLog(ctx context.Context, c *app.RequestContext) {
	var err error
	var req log_gorm.DeleteLogRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	if err = mysql.DeleteLog(req.ID); err != nil {
		c.JSON(200, &log_gorm.DeleteLogResponse{Code: log_gorm.Code_DBErr, Msg: err.Error()})
		return
	}
	c.JSON(consts.StatusOK, &log_gorm.DeleteLogResponse{Code: log_gorm.Code_Success})

}

// QueryLog .
// @router /v1/Log/query/ [POST]
func QueryLog(ctx context.Context, c *app.RequestContext) {
	var err error
	var req log_gorm.QueryLogRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	logs, total, err := mysql.QueryLog(req.Keyword, req.Page, req.PageSize)
	if err != nil {
		c.JSON(200, &log_gorm.QueryLogResponse{Code: log_gorm.Code_DBErr, Msg: err.Error()})
		return
	}
	c.JSON(200, &log_gorm.QueryLogResponse{Code: log_gorm.Code_Success, Logs: pack.Logs(logs), Totoal: total})

}
.
// CreateLog .
// @router /v1/Log/create/ [POST]
func CreateLog(ctx context.Context, c *app.RequestContext) {
	var err error
	var req log_gorm.CreateLogRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	if err = mysql.CreateLog([]*model.Log{
		{
			ActionType:  req.ActionType,
			Status:      0,
			Level:       req.Level,
			HandleTime:  req.HandleTime,
			CreatedBy:   "sys",
			CreatedTime: time.Now(),
			ExternalID:  req.ExternalId,
			Result:      int64(req.Result),
		},
	}); err != nil {
		c.JSON(200, &user_gorm.CreateUserResponse{Code: user_gorm.Code_DBErr, Msg: err.Error()})
		return
	}

	resp := new(log_gorm.CreateLogResponse)

	c.JSON(consts.StatusOK, resp)
}
